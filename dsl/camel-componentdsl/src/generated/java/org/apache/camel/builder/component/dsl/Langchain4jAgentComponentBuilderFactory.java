/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.component.dsl;

import javax.annotation.processing.Generated;
import org.apache.camel.Component;
import org.apache.camel.builder.component.AbstractComponentBuilder;
import org.apache.camel.builder.component.ComponentBuilder;
import org.apache.camel.component.langchain4j.agent.LangChain4jAgentComponent;

/**
 * LangChain4j Agent component
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.ComponentDslMojo")
public interface Langchain4jAgentComponentBuilderFactory {

    /**
     * LangChain4j Agent (camel-langchain4j-agent)
     * LangChain4j Agent component
     * 
     * Category: ai
     * Since: 4.14
     * Maven coordinates: org.apache.camel:camel-langchain4j-agent
     * 
     * @return the dsl builder
     */
    static Langchain4jAgentComponentBuilder langchain4jAgent() {
        return new Langchain4jAgentComponentBuilderImpl();
    }

    /**
     * Builder for the LangChain4j Agent component.
     */
    interface Langchain4jAgentComponentBuilder extends ComponentBuilder<LangChain4jAgentComponent> {
    
        /**
         * The configuration.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param configuration the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder configuration(org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration configuration) {
            doSetProperty("configuration", configuration);
            return this;
        }
    
        /**
         * Comma-separated list of input guardrail class names to validate user
         * input before sending to LLM.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param inputGuardrails the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder inputGuardrails(java.lang.String inputGuardrails) {
            doSetProperty("inputGuardrails", inputGuardrails);
            return this;
        }
    
        
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    
        /**
         * Comma-separated list of output guardrail class names to validate LLM
         * responses.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param outputGuardrails the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder outputGuardrails(java.lang.String outputGuardrails) {
            doSetProperty("outputGuardrails", outputGuardrails);
            return this;
        }
    
        /**
         * Tags for discovering and calling Camel route tools.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param tags the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder tags(java.lang.String tags) {
            doSetProperty("tags", tags);
            return this;
        }
    
        
        /**
         * Whether autowiring is enabled. This is used for automatic autowiring
         * options (the option must be marked as autowired) by looking up in the
         * registry to find if there is a single instance of matching type,
         * which then gets configured on the component. This can be used for
         * automatic configuring JDBC data sources, JMS connection factories,
         * AWS Clients, etc.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: advanced
         * 
         * @param autowiredEnabled the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder autowiredEnabled(boolean autowiredEnabled) {
            doSetProperty("autowiredEnabled", autowiredEnabled);
            return this;
        }
    
        /**
         * Chat Memory Provider of type
         * dev.langchain4j.memory.ChatMemoryProvider. Note for this to be
         * successful, you need to use a reliable ChatMemoryStore. This provider
         * supposes that a user has multiple sessions, if need only a single
         * session, use a default memoryId.
         * 
         * The option is a:
         * &lt;code&gt;dev.langchain4j.memory.chat.ChatMemoryProvider&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param chatMemoryProvider the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder chatMemoryProvider(dev.langchain4j.memory.chat.ChatMemoryProvider chatMemoryProvider) {
            doSetProperty("chatMemoryProvider", chatMemoryProvider);
            return this;
        }
    
        /**
         * Chat Model of type dev.langchain4j.model.chat.ChatModel.
         * 
         * The option is a:
         * &lt;code&gt;dev.langchain4j.model.chat.ChatModel&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param chatModel the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder chatModel(dev.langchain4j.model.chat.ChatModel chatModel) {
            doSetProperty("chatModel", chatModel);
            return this;
        }
    
        /**
         * Retrieval Augmentor for advanced RAG of type
         * dev.langchain4j.rag.RetrievalAugmentor. This allows using RAG on both
         * Naive and Advanced RAG.
         * 
         * The option is a:
         * &lt;code&gt;dev.langchain4j.rag.RetrievalAugmentor&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param retrievalAugmentor the value to set
         * @return the dsl builder
         */
        default Langchain4jAgentComponentBuilder retrievalAugmentor(dev.langchain4j.rag.RetrievalAugmentor retrievalAugmentor) {
            doSetProperty("retrievalAugmentor", retrievalAugmentor);
            return this;
        }
    }

    class Langchain4jAgentComponentBuilderImpl
            extends AbstractComponentBuilder<LangChain4jAgentComponent>
            implements Langchain4jAgentComponentBuilder {
        @Override
        protected LangChain4jAgentComponent buildConcreteComponent() {
            return new LangChain4jAgentComponent();
        }
        private org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration getOrCreateConfiguration(LangChain4jAgentComponent component) {
            if (component.getConfiguration() == null) {
                component.setConfiguration(new org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration());
            }
            return component.getConfiguration();
        }
        @Override
        protected boolean setPropertyOnComponent(
                Component component,
                String name,
                Object value) {
            switch (name) {
            case "configuration": ((LangChain4jAgentComponent) component).setConfiguration((org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration) value); return true;
            case "inputGuardrails": getOrCreateConfiguration((LangChain4jAgentComponent) component).setInputGuardrails((java.lang.String) value); return true;
            case "lazyStartProducer": ((LangChain4jAgentComponent) component).setLazyStartProducer((boolean) value); return true;
            case "outputGuardrails": getOrCreateConfiguration((LangChain4jAgentComponent) component).setOutputGuardrails((java.lang.String) value); return true;
            case "tags": getOrCreateConfiguration((LangChain4jAgentComponent) component).setTags((java.lang.String) value); return true;
            case "autowiredEnabled": ((LangChain4jAgentComponent) component).setAutowiredEnabled((boolean) value); return true;
            case "chatMemoryProvider": getOrCreateConfiguration((LangChain4jAgentComponent) component).setChatMemoryProvider((dev.langchain4j.memory.chat.ChatMemoryProvider) value); return true;
            case "chatModel": getOrCreateConfiguration((LangChain4jAgentComponent) component).setChatModel((dev.langchain4j.model.chat.ChatModel) value); return true;
            case "retrievalAugmentor": getOrCreateConfiguration((LangChain4jAgentComponent) component).setRetrievalAugmentor((dev.langchain4j.rag.RetrievalAugmentor) value); return true;
            default: return false;
            }
        }
    }
}