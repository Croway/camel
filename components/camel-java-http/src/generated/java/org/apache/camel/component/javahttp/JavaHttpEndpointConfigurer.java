/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.javahttp;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class JavaHttpEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        JavaHttpEndpoint target = (JavaHttpEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authbearertoken":
        case "authBearerToken": target.setAuthBearerToken(property(camelContext, java.lang.String.class, value)); return true;
        case "authdomain":
        case "authDomain": target.setAuthDomain(property(camelContext, java.lang.String.class, value)); return true;
        case "authhost":
        case "authHost": target.setAuthHost(property(camelContext, java.lang.String.class, value)); return true;
        case "authmethod":
        case "authMethod": target.setAuthMethod(property(camelContext, java.lang.String.class, value)); return true;
        case "authpassword":
        case "authPassword": target.setAuthPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "authusername":
        case "authUsername": target.setAuthUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeendpoint":
        case "bridgeEndpoint": target.setBridgeEndpoint(property(camelContext, boolean.class, value)); return true;
        case "connecttimeout":
        case "connectTimeout": target.setConnectTimeout(property(camelContext, long.class, value)); return true;
        case "connectionclose":
        case "connectionClose": target.setConnectionClose(property(camelContext, boolean.class, value)); return true;
        case "cookiehandler":
        case "cookieHandler": target.setCookieHandler(property(camelContext, org.apache.camel.http.base.cookie.CookieHandler.class, value)); return true;
        case "copyheaders":
        case "copyHeaders": target.setCopyHeaders(property(camelContext, boolean.class, value)); return true;
        case "disablestreamcache":
        case "disableStreamCache": target.setDisableStreamCache(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "httpmethod":
        case "httpMethod": target.setHttpMethod(property(camelContext, org.apache.camel.http.common.HttpMethods.class, value)); return true;
        case "ignoreresponsebody":
        case "ignoreResponseBody": target.setIgnoreResponseBody(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "oauth2cachetokens":
        case "oauth2CacheTokens": target.setOauth2CacheTokens(property(camelContext, boolean.class, value)); return true;
        case "oauth2cachedtokensdefaultexpiryseconds":
        case "oauth2CachedTokensDefaultExpirySeconds": target.setOauth2CachedTokensDefaultExpirySeconds(property(camelContext, long.class, value)); return true;
        case "oauth2cachedtokensexpirationmarginseconds":
        case "oauth2CachedTokensExpirationMarginSeconds": target.setOauth2CachedTokensExpirationMarginSeconds(property(camelContext, long.class, value)); return true;
        case "oauth2clientid":
        case "oauth2ClientId": target.setOauth2ClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "oauth2clientsecret":
        case "oauth2ClientSecret": target.setOauth2ClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "oauth2resourceindicator":
        case "oauth2ResourceIndicator": target.setOauth2ResourceIndicator(property(camelContext, java.lang.String.class, value)); return true;
        case "oauth2scope":
        case "oauth2Scope": target.setOauth2Scope(property(camelContext, java.lang.String.class, value)); return true;
        case "oauth2tokenendpoint":
        case "oauth2TokenEndpoint": target.setOauth2TokenEndpoint(property(camelContext, java.lang.String.class, value)); return true;
        case "okstatuscoderange":
        case "okStatusCodeRange": target.setOkStatusCodeRange(property(camelContext, java.lang.String.class, value)); return true;
        case "preservehostheader":
        case "preserveHostHeader": target.setPreserveHostHeader(property(camelContext, boolean.class, value)); return true;
        case "proxyauthdomain":
        case "proxyAuthDomain": target.setProxyAuthDomain(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyauthhost":
        case "proxyAuthHost": target.setProxyAuthHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyauthmethod":
        case "proxyAuthMethod": target.setProxyAuthMethod(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyauthnthost":
        case "proxyAuthNtHost": target.setProxyAuthNtHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyauthpassword":
        case "proxyAuthPassword": target.setProxyAuthPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyauthport":
        case "proxyAuthPort": target.setProxyAuthPort(property(camelContext, int.class, value)); return true;
        case "proxyauthscheme":
        case "proxyAuthScheme": target.setProxyAuthScheme(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyauthusername":
        case "proxyAuthUsername": target.setProxyAuthUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyhost":
        case "proxyHost": target.setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport":
        case "proxyPort": target.setProxyPort(property(camelContext, int.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.setRequestTimeout(property(camelContext, long.class, value)); return true;
        case "responsepayloadstreamingthreshold":
        case "responsePayloadStreamingThreshold": target.setResponsePayloadStreamingThreshold(property(camelContext, int.class, value)); return true;
        case "skipcontrolheaders":
        case "skipControlHeaders": target.setSkipControlHeaders(property(camelContext, boolean.class, value)); return true;
        case "skiprequestheaders":
        case "skipRequestHeaders": target.setSkipRequestHeaders(property(camelContext, boolean.class, value)); return true;
        case "skipresponseheaders":
        case "skipResponseHeaders": target.setSkipResponseHeaders(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "throwexceptiononfailure":
        case "throwExceptionOnFailure": target.setThrowExceptionOnFailure(property(camelContext, boolean.class, value)); return true;
        case "useragent":
        case "userAgent": target.setUserAgent(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authbearertoken":
        case "authBearerToken": return java.lang.String.class;
        case "authdomain":
        case "authDomain": return java.lang.String.class;
        case "authhost":
        case "authHost": return java.lang.String.class;
        case "authmethod":
        case "authMethod": return java.lang.String.class;
        case "authpassword":
        case "authPassword": return java.lang.String.class;
        case "authusername":
        case "authUsername": return java.lang.String.class;
        case "bridgeendpoint":
        case "bridgeEndpoint": return boolean.class;
        case "connecttimeout":
        case "connectTimeout": return long.class;
        case "connectionclose":
        case "connectionClose": return boolean.class;
        case "cookiehandler":
        case "cookieHandler": return org.apache.camel.http.base.cookie.CookieHandler.class;
        case "copyheaders":
        case "copyHeaders": return boolean.class;
        case "disablestreamcache":
        case "disableStreamCache": return boolean.class;
        case "headerfilterstrategy":
        case "headerFilterStrategy": return org.apache.camel.spi.HeaderFilterStrategy.class;
        case "httpmethod":
        case "httpMethod": return org.apache.camel.http.common.HttpMethods.class;
        case "ignoreresponsebody":
        case "ignoreResponseBody": return boolean.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "oauth2cachetokens":
        case "oauth2CacheTokens": return boolean.class;
        case "oauth2cachedtokensdefaultexpiryseconds":
        case "oauth2CachedTokensDefaultExpirySeconds": return long.class;
        case "oauth2cachedtokensexpirationmarginseconds":
        case "oauth2CachedTokensExpirationMarginSeconds": return long.class;
        case "oauth2clientid":
        case "oauth2ClientId": return java.lang.String.class;
        case "oauth2clientsecret":
        case "oauth2ClientSecret": return java.lang.String.class;
        case "oauth2resourceindicator":
        case "oauth2ResourceIndicator": return java.lang.String.class;
        case "oauth2scope":
        case "oauth2Scope": return java.lang.String.class;
        case "oauth2tokenendpoint":
        case "oauth2TokenEndpoint": return java.lang.String.class;
        case "okstatuscoderange":
        case "okStatusCodeRange": return java.lang.String.class;
        case "preservehostheader":
        case "preserveHostHeader": return boolean.class;
        case "proxyauthdomain":
        case "proxyAuthDomain": return java.lang.String.class;
        case "proxyauthhost":
        case "proxyAuthHost": return java.lang.String.class;
        case "proxyauthmethod":
        case "proxyAuthMethod": return java.lang.String.class;
        case "proxyauthnthost":
        case "proxyAuthNtHost": return java.lang.String.class;
        case "proxyauthpassword":
        case "proxyAuthPassword": return java.lang.String.class;
        case "proxyauthport":
        case "proxyAuthPort": return int.class;
        case "proxyauthscheme":
        case "proxyAuthScheme": return java.lang.String.class;
        case "proxyauthusername":
        case "proxyAuthUsername": return java.lang.String.class;
        case "proxyhost":
        case "proxyHost": return java.lang.String.class;
        case "proxyport":
        case "proxyPort": return int.class;
        case "requesttimeout":
        case "requestTimeout": return long.class;
        case "responsepayloadstreamingthreshold":
        case "responsePayloadStreamingThreshold": return int.class;
        case "skipcontrolheaders":
        case "skipControlHeaders": return boolean.class;
        case "skiprequestheaders":
        case "skipRequestHeaders": return boolean.class;
        case "skipresponseheaders":
        case "skipResponseHeaders": return boolean.class;
        case "sslcontextparameters":
        case "sslContextParameters": return org.apache.camel.support.jsse.SSLContextParameters.class;
        case "throwexceptiononfailure":
        case "throwExceptionOnFailure": return boolean.class;
        case "useragent":
        case "userAgent": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        JavaHttpEndpoint target = (JavaHttpEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authbearertoken":
        case "authBearerToken": return target.getAuthBearerToken();
        case "authdomain":
        case "authDomain": return target.getAuthDomain();
        case "authhost":
        case "authHost": return target.getAuthHost();
        case "authmethod":
        case "authMethod": return target.getAuthMethod();
        case "authpassword":
        case "authPassword": return target.getAuthPassword();
        case "authusername":
        case "authUsername": return target.getAuthUsername();
        case "bridgeendpoint":
        case "bridgeEndpoint": return target.isBridgeEndpoint();
        case "connecttimeout":
        case "connectTimeout": return target.getConnectTimeout();
        case "connectionclose":
        case "connectionClose": return target.isConnectionClose();
        case "cookiehandler":
        case "cookieHandler": return target.getCookieHandler();
        case "copyheaders":
        case "copyHeaders": return target.isCopyHeaders();
        case "disablestreamcache":
        case "disableStreamCache": return target.isDisableStreamCache();
        case "headerfilterstrategy":
        case "headerFilterStrategy": return target.getHeaderFilterStrategy();
        case "httpmethod":
        case "httpMethod": return target.getHttpMethod();
        case "ignoreresponsebody":
        case "ignoreResponseBody": return target.isIgnoreResponseBody();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "oauth2cachetokens":
        case "oauth2CacheTokens": return target.isOauth2CacheTokens();
        case "oauth2cachedtokensdefaultexpiryseconds":
        case "oauth2CachedTokensDefaultExpirySeconds": return target.getOauth2CachedTokensDefaultExpirySeconds();
        case "oauth2cachedtokensexpirationmarginseconds":
        case "oauth2CachedTokensExpirationMarginSeconds": return target.getOauth2CachedTokensExpirationMarginSeconds();
        case "oauth2clientid":
        case "oauth2ClientId": return target.getOauth2ClientId();
        case "oauth2clientsecret":
        case "oauth2ClientSecret": return target.getOauth2ClientSecret();
        case "oauth2resourceindicator":
        case "oauth2ResourceIndicator": return target.getOauth2ResourceIndicator();
        case "oauth2scope":
        case "oauth2Scope": return target.getOauth2Scope();
        case "oauth2tokenendpoint":
        case "oauth2TokenEndpoint": return target.getOauth2TokenEndpoint();
        case "okstatuscoderange":
        case "okStatusCodeRange": return target.getOkStatusCodeRange();
        case "preservehostheader":
        case "preserveHostHeader": return target.isPreserveHostHeader();
        case "proxyauthdomain":
        case "proxyAuthDomain": return target.getProxyAuthDomain();
        case "proxyauthhost":
        case "proxyAuthHost": return target.getProxyAuthHost();
        case "proxyauthmethod":
        case "proxyAuthMethod": return target.getProxyAuthMethod();
        case "proxyauthnthost":
        case "proxyAuthNtHost": return target.getProxyAuthNtHost();
        case "proxyauthpassword":
        case "proxyAuthPassword": return target.getProxyAuthPassword();
        case "proxyauthport":
        case "proxyAuthPort": return target.getProxyAuthPort();
        case "proxyauthscheme":
        case "proxyAuthScheme": return target.getProxyAuthScheme();
        case "proxyauthusername":
        case "proxyAuthUsername": return target.getProxyAuthUsername();
        case "proxyhost":
        case "proxyHost": return target.getProxyHost();
        case "proxyport":
        case "proxyPort": return target.getProxyPort();
        case "requesttimeout":
        case "requestTimeout": return target.getRequestTimeout();
        case "responsepayloadstreamingthreshold":
        case "responsePayloadStreamingThreshold": return target.getResponsePayloadStreamingThreshold();
        case "skipcontrolheaders":
        case "skipControlHeaders": return target.isSkipControlHeaders();
        case "skiprequestheaders":
        case "skipRequestHeaders": return target.isSkipRequestHeaders();
        case "skipresponseheaders":
        case "skipResponseHeaders": return target.isSkipResponseHeaders();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getSslContextParameters();
        case "throwexceptiononfailure":
        case "throwExceptionOnFailure": return target.isThrowExceptionOnFailure();
        case "useragent":
        case "userAgent": return target.getUserAgent();
        default: return null;
        }
    }
}

